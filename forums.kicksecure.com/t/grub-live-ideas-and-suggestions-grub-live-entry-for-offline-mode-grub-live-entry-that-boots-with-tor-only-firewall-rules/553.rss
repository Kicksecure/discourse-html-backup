<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Grub live ideas and suggestions / Grub live entry for offline mode / Grub live entry that boots with Tor only firewall rules</title>
    <link>https://forums.kicksecure.com/t/grub-live-ideas-and-suggestions-grub-live-entry-for-offline-mode-grub-live-entry-that-boots-with-tor-only-firewall-rules/553</link>
    <description>Dear Kicksecure Development Team,

I would like to suggest some enhancements to the GRUB Live environment. Specifically, it would be beneficial to include additional features or options that could improve user experience and functionality. Here are two ideas to include with the grub-live package:

- **Grub live entry for offline mode**:  another grub live entry for booting into Live mode USER with all networking disabled


- **Grub live entry that boots with Tor only firewall rules**:  another grub live entry for booting into Live mode USER with Tor only firewall with tor transparent proxy for users that are on lower RAM systems that don&#39;t want to install whonix with the installer in usability misc but already have tb-launcher installed. Tor daemon already comes installed with Kicksecure so additionally maybe load some torsocks wrappers for certain commands like curl, wget, git, whois, etc. if possible.

Here are some drafts that I havent tried yet but will put them here for a starting point, reference, and ideas.

**offline mode**
`/etc/grub.d/40_offline_mode`

```
# GRUB Live entry to disable networking (offline mode)
menuentry &quot;LIVE mode USER (Offline Mode)&quot; {
    # Run the disable networking script that blacklists all wireless drivers and firewall to block all traffic
    /usr/local/bin/disable_networking
    set root=(hd0,1)  # Adjust this to your root partition
    # mask network target
    linux /vmlinuz-linux root=/dev/sda1 quiet splash systemd.mask=network.target
    initrd /initramfs-linux.img
}
```

`/usr/local/bin/disable_networking`

```
#!/bin/bash
### Grub disable networking script called by 
## Blacklist all wifi drivers
## Blacklist bluetooth driver (commented out)

# Create blacklist file

touch /etc/modprobe.d/disable_networking.conf 2&gt;/dev/null

# Define the blacklist file path
BLACKLIST_FILE=&quot;/etc/modprobe.d/disable_networking.conf&quot;

# Create or clear the blacklist file
echo &quot;# Custom blacklist for wireless drivers&quot; | tee $BLACKLIST_FILE &gt; /dev/null

# Get the list of wireless drivers
WIRELESS_DRIVERS=$(ls /lib/modules/$(uname -r)/kernel/drivers/net/wireless/)

# Check if there are any wireless drivers
if [ -z &quot;$WIRELESS_DRIVERS&quot; ]; then
    echo &quot;No wireless drivers found in /lib/modules/$(uname -r)/kernel/drivers/net/wireless/&quot;
else
    # Loop through each driver and add it to the blacklist
    for DRIVER in $WIRELESS_DRIVERS; do
        DRIVER_NAME=$(basename &quot;$DRIVER&quot; | sed &#39;s/\.[^.]*$//&#39;)  # Remove file extension
        echo &quot;blacklist $DRIVER_NAME&quot; | tee -a $BLACKLIST_FILE &gt; /dev/null
        echo &quot;Blacklisted driver: $DRIVER_NAME&quot;
        
        # Remove the driver if it is currently loaded
        if lsmod | grep -q &quot;$DRIVER_NAME&quot;; then
            echo &quot;Removing loaded driver: $DRIVER_NAME&quot;
            modprobe -r &quot;$DRIVER_NAME&quot;
        fi
    done
fi

## Blacklist bluetooth
# List of Bluetooth drivers to blacklist
#BT_DRIVERS=(
#    &quot;btusb&quot;
#    &quot;bluetooth&quot;
#    &quot;btintel&quot;
#)
#
# Loop through the drivers and add them to the blacklist
#for DRIVER in &quot;${BT_DRIVERS[@]}&quot;; do
#    echo &quot;blacklist $DRIVER&quot; &gt;&gt; &quot;BLACKLIST_FILE&quot;
#    modprobe -r &quot;$DRIVER&quot;
#done


### Firewall
# Set up nftables to disable all incoming, forwarding, and outgoing traffic
echo &quot;Setting up nftables to disable all network traffic...&quot;

# Flush existing rules
nft flush ruleset

# Create a new ruleset
nft add table inet filter
nft add chain inet filter input { type filter hook input priority 0; }
nft add chain inet filter forward { type filter hook forward priority 0; }
nft add chain inet filter output { type filter hook output priority 0; }

# Set default policies to drop all traffic
nft add rule inet filter input drop
nft add rule inet filter forward drop
nft add rule inet filter output drop

echo -e &quot; All wireless drivers have been blacklisted in $BLACKLIST_FILE.\n All network traffic has been disabled.\n Offline mode enabled&quot;
````

**Tor only**
`/etc/grub.d/40_tor_only_firewall`

```
menuentry &quot;LIVE mode USER (Tor Only)&quot; {
    # Run the Tor firewall script
    /usr/local/bin/Tor_only_firewall
    # Boot into the default kernel
    linux /vmlinuz-&lt;your-kernel-version&gt; root=/dev/sda1 ro
    initrd /initrd.img-&lt;your-kernel-version&gt;
}
```

`/usr/local/bin/Tor_only_firewall`

```
#!/bin/bash
### Tor only firewall for GRUB Live (Tor Only)
# Flush existing rules
nft flush ruleset

# Create a new ruleset
nft add table inet filter
nft add chain inet filter input { type filter hook input priority 0; }
nft add chain inet filter forward { type filter hook forward priority 0; }
nft add chain inet filter output { type filter hook output priority 0; }

# Allow loopback traffic
nft add rule inet filter input iif &quot;lo&quot; accept
nft add rule inet filter output oif &quot;lo&quot; accept

# Allow established and related connections
nft add rule inet filter input ct state established,related accept
nft add rule inet filter output ct state established,related accept

# Allow Tor traffic (default Tor port is 9050)
nft add rule inet filter input tcp dport 9050 accept
nft add rule inet filter output tcp sport 9050 accept

# Allow DNS traffic (UDP port 53)
nft add rule inet filter input udp dport 53 accept
nft add rule inet filter output udp sport 53 accept

# Drop all other traffic
nft add rule inet filter input drop
nft add rule inet filter forward drop
nft add rule inet filter output drop

echo &quot;Tor only firewall rules applied.&quot;
```</description>
    
    <lastBuildDate>Thu, 29 Aug 2024 11:49:00 +0000</lastBuildDate>
    <category>Development</category>
    <atom:link href="https://forums.kicksecure.com/t/grub-live-ideas-and-suggestions-grub-live-entry-for-offline-mode-grub-live-entry-that-boots-with-tor-only-firewall-rules/553.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Grub live ideas and suggestions / Grub live entry for offline mode / Grub live entry that boots with Tor only firewall rules</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>Unfortunately, this is probably incompatible with future plans, that is<br>
allowing the user to choose user or admin during boot. See:</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://www.kicksecure.com/wiki/Dev/boot_modes">
  <header class="source">
      <img src="https://www.kicksecure.com/favicon.svg?hsversion=2" class="site-icon" width="40" height="40">

      <a href="https://www.kicksecure.com/wiki/Dev/boot_modes" target="_blank" rel="noopener" title="11:50AM - 19 July 2024">Kicksecure – 19 Jul 24</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/387;"><img src="https://www.kicksecure.com/w/images/f/fc/Kicksecure-twitter-post.jpg?version=30a0ad75271a4836786771c345c960b8" class="thumbnail" width="690" height="388"></div>

<h3><a href="https://www.kicksecure.com/wiki/Dev/boot_modes" target="_blank" rel="noopener">Multiple Boot Modes for Better Security: an Implementation of Untrusted Root</a></h3>

  <p>Persistent User / Live user / Persistent Secureadmin / Persistent Superadmin / Persistent Recovery Mode</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>That way, all boot options would quickly double.</p>
<p>There’s just a limited amount of boot menu entries that make sense to<br>
not over-complicate Kicksecure.</p>
<blockquote>
<ul>
<li><strong>Grub live entry that boots with Tor only firewall rules</strong>:  another grub live entry for booting into Live mode USER with Tor only firewall with tor transparent proxy for users that are on lower RAM systems that don’t want to install whonix with the installer in usability misc but already have tb-launcher installed. Tor daemon already comes installed with Kicksecure so additionally maybe load some torsocks wrappers for certain commands like curl, wget, git, whois, etc. if possible.</li>
</ul>
</blockquote>
<p>Out of scope for Kicksecure as per:</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://www.kicksecure.com/wiki/Privacy">
  <header class="source">
      <img src="https://www.kicksecure.com/favicon.svg?hsversion=2" class="site-icon" width="40" height="40">

      <a href="https://www.kicksecure.com/wiki/Privacy" target="_blank" rel="noopener" title="05:55PM - 23 January 2024">Kicksecure – 23 Jan 24</a>
  </header>

  <article class="onebox-body">
    <img width="500" height="500" src="https://www.kicksecure.com/w/images/d/d4/Privacy_Goals_and_Non-Goals.png?version=c36df86a4b34cee817898b5c367669b6" class="thumbnail onebox-avatar">

<h3><a href="https://www.kicksecure.com/wiki/Privacy" target="_blank" rel="noopener">Privacy Goals and Non-Goals of Kicksecure</a></h3>

  <p>An overview of the privacy goals and non-goals of Kicksecure, emphasizing its focus on security over privacy and anonymity.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<blockquote>
<p>Here are some drafts that I havent tried yet but will put them here for a starting point, reference, and ideas.</p>
<p><strong>offline mode</strong><br>
<code>/etc/grub.d/40_offline_mode</code></p>
</blockquote>
<p>We cannot write menuentry directly to /etc/grub.d/. We cannot hardcode<br>
any /etc/grub.d/ because these need to be automatically updated on<br>
kernel upgrades. So the proper mechanisms need to be used similar to how<br>
grub-live is implementing this.</p>
<blockquote>
<pre><code> /usr/local/bin/disable_networking
</code></pre>
</blockquote>
<p>It’s not possible to run shell scripts from grub boot menu. At best, a<br>
kernel parameter can be set. Then during boot, the init system (in case<br>
of Kicksecure at time of writing: systemd) can react on that kernel<br>
parameter and act accordingly such as by executing a shells script.</p>
<p>This is non-trivial to develop. Hence, above proposal has not been<br>
implemented yet.</p>
<blockquote>
<p>BLACKLIST_FILE=“/etc/modprobe.d/disable_networking.conf”</p>
</blockquote>
<p>This would need to be written before it is processed. Probably doable<br>
with the correct systemd unit file ordering but non-trivial.</p>
<p>Then also there needs to be a solid implementation to delete or<br>
deactivate such a file during a regular boot.</p>
<p>Since this is unlikely getting implemented into Kicksecure anytime soon<br>
or never at all, I recommend to look for other places where you can<br>
request such features. To mind come the initrd generator (dracut),<br>
systemd, the network stack (NetworkManager), Linux, Debian.</p>
<p>If such features are implemented upstream, these become much easier to<br>
use within Kicksecure.</p>
          <p><a href="https://forums.kicksecure.com/t/grub-live-ideas-and-suggestions-grub-live-entry-for-offline-mode-grub-live-entry-that-boots-with-tor-only-firewall-rules/553/2">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/grub-live-ideas-and-suggestions-grub-live-entry-for-offline-mode-grub-live-entry-that-boots-with-tor-only-firewall-rules/553/2</link>
        <pubDate>Thu, 29 Aug 2024 11:49:00 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-553-2</guid>
        <source url="https://forums.kicksecure.com/t/grub-live-ideas-and-suggestions-grub-live-entry-for-offline-mode-grub-live-entry-that-boots-with-tor-only-firewall-rules/553.rss">Grub live ideas and suggestions / Grub live entry for offline mode / Grub live entry that boots with Tor only firewall rules</source>
      </item>
      <item>
        <title>Grub live ideas and suggestions / Grub live entry for offline mode / Grub live entry that boots with Tor only firewall rules</title>
        <dc:creator><![CDATA[Yatogami]]></dc:creator>
        <description><![CDATA[
            <p>Dear Kicksecure Development Team,</p>
<p>I would like to suggest some enhancements to the GRUB Live environment. Specifically, it would be beneficial to include additional features or options that could improve user experience and functionality. Here are two ideas to include with the grub-live package:</p>
<ul>
<li>
<p><strong>Grub live entry for offline mode</strong>:  another grub live entry for booting into Live mode USER with all networking disabled</p>
</li>
<li>
<p><strong>Grub live entry that boots with Tor only firewall rules</strong>:  another grub live entry for booting into Live mode USER with Tor only firewall with tor transparent proxy for users that are on lower RAM systems that don’t want to install whonix with the installer in usability misc but already have tb-launcher installed. Tor daemon already comes installed with Kicksecure so additionally maybe load some torsocks wrappers for certain commands like curl, wget, git, whois, etc. if possible.</p>
</li>
</ul>
<p>Here are some drafts that I havent tried yet but will put them here for a starting point, reference, and ideas.</p>
<p><strong>offline mode</strong><br>
<code>/etc/grub.d/40_offline_mode</code></p>
<pre><code class="lang-auto"># GRUB Live entry to disable networking (offline mode)
menuentry "LIVE mode USER (Offline Mode)" {
    # Run the disable networking script that blacklists all wireless drivers and firewall to block all traffic
    /usr/local/bin/disable_networking
    set root=(hd0,1)  # Adjust this to your root partition
    # mask network target
    linux /vmlinuz-linux root=/dev/sda1 quiet splash systemd.mask=network.target
    initrd /initramfs-linux.img
}
</code></pre>
<p><code>/usr/local/bin/disable_networking</code></p>
<pre><code class="lang-auto">#!/bin/bash
### Grub disable networking script called by 
## Blacklist all wifi drivers
## Blacklist bluetooth driver (commented out)

# Create blacklist file

touch /etc/modprobe.d/disable_networking.conf 2&gt;/dev/null

# Define the blacklist file path
BLACKLIST_FILE="/etc/modprobe.d/disable_networking.conf"

# Create or clear the blacklist file
echo "# Custom blacklist for wireless drivers" | tee $BLACKLIST_FILE &gt; /dev/null

# Get the list of wireless drivers
WIRELESS_DRIVERS=$(ls /lib/modules/$(uname -r)/kernel/drivers/net/wireless/)

# Check if there are any wireless drivers
if [ -z "$WIRELESS_DRIVERS" ]; then
    echo "No wireless drivers found in /lib/modules/$(uname -r)/kernel/drivers/net/wireless/"
else
    # Loop through each driver and add it to the blacklist
    for DRIVER in $WIRELESS_DRIVERS; do
        DRIVER_NAME=$(basename "$DRIVER" | sed 's/\.[^.]*$//')  # Remove file extension
        echo "blacklist $DRIVER_NAME" | tee -a $BLACKLIST_FILE &gt; /dev/null
        echo "Blacklisted driver: $DRIVER_NAME"
        
        # Remove the driver if it is currently loaded
        if lsmod | grep -q "$DRIVER_NAME"; then
            echo "Removing loaded driver: $DRIVER_NAME"
            modprobe -r "$DRIVER_NAME"
        fi
    done
fi

## Blacklist bluetooth
# List of Bluetooth drivers to blacklist
#BT_DRIVERS=(
#    "btusb"
#    "bluetooth"
#    "btintel"
#)
#
# Loop through the drivers and add them to the blacklist
#for DRIVER in "${BT_DRIVERS[@]}"; do
#    echo "blacklist $DRIVER" &gt;&gt; "BLACKLIST_FILE"
#    modprobe -r "$DRIVER"
#done


### Firewall
# Set up nftables to disable all incoming, forwarding, and outgoing traffic
echo "Setting up nftables to disable all network traffic..."

# Flush existing rules
nft flush ruleset

# Create a new ruleset
nft add table inet filter
nft add chain inet filter input { type filter hook input priority 0; }
nft add chain inet filter forward { type filter hook forward priority 0; }
nft add chain inet filter output { type filter hook output priority 0; }

# Set default policies to drop all traffic
nft add rule inet filter input drop
nft add rule inet filter forward drop
nft add rule inet filter output drop

echo -e " All wireless drivers have been blacklisted in $BLACKLIST_FILE.\n All network traffic has been disabled.\n Offline mode enabled"
</code></pre>
<p><strong>Tor only</strong><br>
<code>/etc/grub.d/40_tor_only_firewall</code></p>
<pre><code class="lang-auto">menuentry "LIVE mode USER (Tor Only)" {
    # Run the Tor firewall script
    /usr/local/bin/Tor_only_firewall
    # Boot into the default kernel
    linux /vmlinuz-&lt;your-kernel-version&gt; root=/dev/sda1 ro
    initrd /initrd.img-&lt;your-kernel-version&gt;
}
</code></pre>
<p><code>/usr/local/bin/Tor_only_firewall</code></p>
<pre><code class="lang-auto">#!/bin/bash
### Tor only firewall for GRUB Live (Tor Only)
# Flush existing rules
nft flush ruleset

# Create a new ruleset
nft add table inet filter
nft add chain inet filter input { type filter hook input priority 0; }
nft add chain inet filter forward { type filter hook forward priority 0; }
nft add chain inet filter output { type filter hook output priority 0; }

# Allow loopback traffic
nft add rule inet filter input iif "lo" accept
nft add rule inet filter output oif "lo" accept

# Allow established and related connections
nft add rule inet filter input ct state established,related accept
nft add rule inet filter output ct state established,related accept

# Allow Tor traffic (default Tor port is 9050)
nft add rule inet filter input tcp dport 9050 accept
nft add rule inet filter output tcp sport 9050 accept

# Allow DNS traffic (UDP port 53)
nft add rule inet filter input udp dport 53 accept
nft add rule inet filter output udp sport 53 accept

# Drop all other traffic
nft add rule inet filter input drop
nft add rule inet filter forward drop
nft add rule inet filter output drop

echo "Tor only firewall rules applied."
</code></pre>
          <p><a href="https://forums.kicksecure.com/t/grub-live-ideas-and-suggestions-grub-live-entry-for-offline-mode-grub-live-entry-that-boots-with-tor-only-firewall-rules/553/1">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/grub-live-ideas-and-suggestions-grub-live-entry-for-offline-mode-grub-live-entry-that-boots-with-tor-only-firewall-rules/553/1</link>
        <pubDate>Thu, 29 Aug 2024 03:46:10 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-553-1</guid>
        <source url="https://forums.kicksecure.com/t/grub-live-ideas-and-suggestions-grub-live-entry-for-offline-mode-grub-live-entry-that-boots-with-tor-only-firewall-rules/553.rss">Grub live ideas and suggestions / Grub live entry for offline mode / Grub live entry that boots with Tor only firewall rules</source>
      </item>
  </channel>
</rss>
